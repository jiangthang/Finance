# -*- coding: utf-8 -*-
"""stock prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLplFSqmWz8VDJ2IcxcMMoRhoSUIDIPF
"""

#artificial recurrent neural network (long short term memory LSTM) 
#predict closing stock price

import math
from pandas_datareader import data as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime
from keras.models import Sequential 
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import matplotlib


n_day = 2

#Get the stock starting date
stockStartDate = '2013-01-01'
# Get the stocks ending date aka todays date and format it in the form YYYY-MM-DD
today = datetime.today().strftime('%Y-%m-%d')


#get data
df = web.DataReader('ATZ.TO', data_source = 'yahoo', start=stockStartDate , end=today)
#show data
df

#get number of rows and columns in data set
df.shape

#visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('close price history')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Closte Price USD ($)', fontsize = 18)
plt.show()

#Create new dataframe with only 'Close colum
data = df.filter(['Close'])
#convert the data to numpy array
dataset = data.values
#get number of rows to train the model on
training_data_len = math.ceil(len(dataset)* .8)

training_data_len

#scale the data
scaler = MinMaxScaler(feature_range = (0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# create training data set
#create the scaled training data set
train_data = scaled_data[0:training_data_len, :]
#split the datra into x_ train and y_train dataset
x_train = []
y_train = []
# train through past n days


for i in range (n_day, len(train_data)):
  x_train.append (train_data [i-n_day:i, 0])
  y_train.append (train_data[i,0])
  if i <= n_day+1:
    print(x_train)
    print (y_train)
    print()

#conver x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#build the LSTM Model
model = Sequential ()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#Train the model
model.fit(x_train, y_train, batch_size=1, epochs = 1)

#create the testing data set
#create a new array containing scaled value from index 1543 to 2003
test_data = scaled_data[training_data_len - n_day:, :]
#create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(n_day, len(test_data)):
  x_test.append(test_data[i-n_day:i, 0])

#convert the dat to a numpy array
x_test = np.array(x_test)

#reshape the data
x_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1], 1))

#get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get the root mean square error (RMSE) - evaluating model
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#visualize the data
plt.figure(figsize=(16,8))
plt.title ('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD ($)', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show

#show the valid and predicted prices
valid

#predict for next day, 
#get the quote 
apple_quote = web.DataReader('ATZ.TO', data_source = 'yahoo', start = '2012-01-01', end= today)
#create new dataframe
new_df = apple_quote.filter(['Close'])
#get the last 60 day closing price values and convert the dataframe to an array
last_n_day_days = new_df[-n_day:].values
#scale the data to be values between 0 and 1
last_n_day_days_scaled = scaler.transform(last_n_day_days)
#create an empty list
X_test = []
#append the past 60 days 
X_test.append(last_n_day_days_scaled)
#convert the X_test dataset to a numpy array
X_test = np.array(X_test)
#reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))
#get predicted scaled price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

#get the actual quote
apple_quote2 = web.DataReader('ATZ.to', data_source = 'yahoo', start = '2020-06-01', end= today)
print(apple_quote2['Close'])